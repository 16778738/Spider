# _*_coding:UTF-8 _*_
import json, re, urllib, MySQLdb, requests
import random
import string
import time
from random import randint
from lxml import etree

'''
    '赵', '钱', '孙', '李', '周', '吴', '郑', '王',
    '冯', '陈', '褚', '卫', '蒋', '沈', '韩', '杨',
    '朱', '秦', '尤', '许', '何', '吕', '施', '张',
    '孔', '曹', '严', '华', '金', '魏', '陶', '姜',
    '戚', '谢', '邹', '喻', '柏', '水', '窦', '章',
    '云', '苏', '潘', '葛', '奚', '范', '彭', '郎',
    '鲁', '韦', '昌', '马', '苗', '凤', '花', '方',
    '俞', '任', '袁', '柳', '酆', '鲍', '史', '唐',
    '费', '廉', '岑', '薛', '雷', '贺', '倪', '汤',
    '滕', '殷', '罗', '毕', '郝', '邬', '安', '常',
    '乐', '于', '时', '傅', '皮', '卞', '齐', '康',
    '伍', '余', '元', '卜', '顾', '孟', '平', '黄',
    '和', '穆', '萧', '尹', '姚', '邵', '湛', '汪',
    '祁', '毛', '禹', '狄', '米', '贝', '明', '臧',
    '计', '伏', '成', '戴', '谈', '宋', '茅', '庞',
    '熊', '纪', '舒', '屈', '项', '祝', '董', '梁',
    '杜', '阮', '蓝', '闵', '席', '季', '麻', '强',
    '贾', '路', '娄', '危', '江', '童', '颜', '郭',
    '梅', '盛', '林', '刁', '钟', '徐', '邱', '骆',
    '高', '夏', '蔡', '田', '樊', '胡', '凌', '霍',
    '虞', '万', '支', '柯', '昝', '管', '卢', '莫',
    '经', '房', '裘', '缪', '干', '解', '应', '宗',
    '丁', '宣', '贲', '邓', '郁', '单', '杭', '洪',
    '包', '诸', '左', '石', '崔', '吉', '钮', '龚',
    '程', '嵇', '邢', '滑', '裴', '陆', '荣', '翁',
    '荀', '羊', '於', '惠', '甄', '曲', '家', '封',
    '芮', '羿', '储', '靳', '汲', '邴', '糜', '松',
    '井', '段', '富', '巫', '乌', '焦', '巴', '弓',
    '牧', '隗', '山', '谷',  '侯', '宓', '蓬',
    '全', '郗', '班', '仰', '秋', '仲', '伊', '宫',
    '宁', '仇', '栾', '暴', '甘', '钭', '厉', '戎',
    '祖', '武', '符', '刘', '景', '詹', '束', '龙',
    '叶', '幸', '司', '韶', '郜', '黎', '蓟', '薄',
    '印', '宿', '白', '怀', '蒲', '邰', '从', '鄂',
    '索', '咸', '籍', '赖', '卓', '蔺', '屠', '蒙',
    '池', '乔', '阴', '鬱', '胥', '能', '苍', '双',
    '闻', '莘', '党', '翟', '谭', '贡', '劳', '逄',
    '姬', '申', '扶', '堵', '冉', '宰', '郦', '雍',
    '卻', '璩', '桑', '桂', '濮', '牛', '寿', '通',
    '边', '扈', '燕', '冀', '郏', '浦', '尚', '农',
    '温', '别', '庄', '晏', '柴', '瞿', '阎', '充',
    '慕', '连', '茹', '习', '宦', '艾', '鱼', '容',
    '向', '古', '易', '慎', '戈', '廖', '庾', '终',
    '暨', '居', '衡', '步', '都', '耿', '满', '弘',
    '匡', '国', '文', '寇', '广', '禄', '阙', '东',
    '欧', '殳', '沃', '利', '蔚', '越', '夔', '隆',
    '师', '巩', '厍', '聂', '晁', '勾', '敖', '融',
    '冷', '訾', '辛', '阚', '那', '简', '饶', '空',
    '曾', '毋', '沙', '乜', '养', '鞠', '须', '丰',
    '巢', '关', '蒯', '相', '查', '后', '荆', '红',
    '游', '竺', '权', '逯', '盖', '益', '桓', '公',
    '万', '俟', '司', '马', '上', '官', '欧', '阳',
    '夏', '侯', '诸', '葛', '闻', '人', '东', '方',
    '赫', '连', '皇', '甫', '尉', '迟', '公', '羊',
    '澹', '台', '公', '冶', '宗', '政', '濮', '阳',
    '淳', '于', '单', '于', '太', '叔', '申', '屠',
    '公', '孙', '仲', '孙', '轩', '辕', '令', '狐',
    '钟', '离', '宇', '文', '长', '孙', '慕', '容',
    '鲜', '于', '闾', '丘', '司', '徒', '司', '空',
    '丌', '官', '司', '寇', '仉', '督', '子', '车',
    '颛', '孙', '端', '木', '巫', '马', '公', '西',
    '漆', '雕', '乐', '正', '壤', '驷', '公', '良',
    '拓', '跋', '夹', '谷', '宰', '父', '谷', '梁',
    '晋', '楚', '闫', '法', '汝', '鄢', '涂', '钦',
    '段', '干', '百', '里', '东', '郭', '南', '门',
    '呼', '延', '归', '海', '羊', '舌', '微', '生',
    '岳', '帅', '缑', '亢', '况', '郈', '有', '琴',
    '梁', '丘', '左', '丘', '东', '门', '西', '门',
    '商', '牟', '佘', '佴', '伯', '赏', '南', '宫',
    '墨', '哈', '谯', '笪', '年', '爱', '阳', '佟',
    '第', '五', '言', '福', '百', '家', '姓',
        '汇程', '楷信', '宏昌', '捷凯',
    '浩行', '金岛', '博创', '顶尖',
    '煜翌', '智来', '坤益', '磐石',
    '江达', '涵耀', '驱力', '雅度',
    '顶峰', '主流', '创美', '祢椎',
    '博洋', '上元', '沸点', '兴豹',
    '聚格', '辉恒', '壹点', '金粒',
    '峰园', '传扬', '丰德', '昊略',
    '通鸿', '炉匠', '飞越', '云海',
    '标奇', '北星', '茂原', '一席',
    '蓝胜', '北奥', '鼎越', '金辉',
    '奥裕', '乾鼎', '世邦', '通诚',
    '佰畅翰', '五维度', '光春鼎',
    '清心坊', '博润德', '恒冠天',
    '普拉司', '协顺美', '如吉洪',
    '千里马', '鼎永捷', '金葵花',
    '跃科聚', '弘耀新', '满祥利',
    '鑫焦点', '威士顿', '果壳皮',
    '丝玫尔', '祥全仁', '元捷长',
    '瑞瑞宝', '海之翼', '奥百斯',
        '的', '一', '了', '是', '我', '不', '在', '人', '们', '有', '来', '他', '这', '上', '着', '个', '地', '到', '大', '里', '说', '去', '子',
    '得', '也', '和', '那', '要', '下', '看', '天', '时', '过', '出', '小', '么', '起', '你', '都', '把', '好', '还', '多', '没', '为',
    '又', '可', '家', '学', '只', '以', '主', '会',
    '样', '年', '想', '能', '生', '同', '老', '中', '从', '自', '面', '前', '头', '到', '它', '后', '然', '走', '很', '像', '见', '两', '用',
    '她', '国', '动', '进', '成', '回', '什', '边', '作', '对', '开', '而', '已', '些', '现', '山', '民', '候', '经', '发', '工', '向', '事',
    '命', '给', '长', '水', '几', '义', '三', '声', '于', '高', '正', '妈',
    '手', '知', '理', '眼', '志', '点', '心', '战', '二', '问', '但', '身', '方', '实', '吃', '做', '叫', '当', '住', '听', '革', '打', '呢',
    '真', '党', '全', '才', '四', '已', '所', '敌', '之', '最', '光', '产', '情', '路', '分', '总', '条', '白', '话', '东', '席', '次', '亲',
    '如', '被', '花', '口', '放', '儿', '常', '西', '气', '五', '第', '使',
    '写', '军', '吧', '文', '运', '在', '果', '怎', '定', '许', '快', '明', '行', '因', '别', '飞', '外', '树', '物', '活', '部', '门', '无',
    '往', '船', '望', '新', '带', '队', '先', '力', '完', '间', '却', '站', '代', '员', '机', '更', '九', '您', '每', '风', '级', '跟', '笑',
    '啊', '孩', '万', '少', '直', '意', '夜', '比', '阶', '连', '车', '重',
    '便', '斗', '马', '哪', '化', '太', '指', '变', '社', '似', '士', '者', '干', '石', '满', '决', '百', '原', '拿', '群', '究', '各', '六',
    '本', '思', '解', '立', '河', '爸', '村', '八', '难', '早', '论', '吗', '根', '共', '让', '相', '研', '今', '其', '书', '坐', '接', '应',
    '关', '信', '觉', '死', '步', '反', '处', '记', '将', '千', '找', '争',
    '领', '或', '师', '结', '块', '跑', '谁', '草', '越', '字', '加', '脚', '紧', '爱', '等', '习', '阵', '怕', '月', '青', '半', '火', '法',
    '题', '建',    '的', '一', '是', '在', '不', '了', '有', '和', '人', '这', '中', '大', '为', '上', '个', '国', '我', '以', '要', '他',
    '时', '来', '用', '们', '生', '到', '作', '地', '于', '出', '就', '分', '对', '成', '会', '可', '主', '发', '年', '动',
    '同', '工', '也', '能', '下', '过', '子', '说', '产', '种', '面', '而', '方', '后', '多', '定', '行', '学', '法', '所',
    '民', '得', '经', '十', '三', '之', '进', '着', '等', '部', '度', '家', '电', '力', '里', '如', '水', '化', '高', '自',
    '二', '理', '起', '小', '物', '现', '实', '加', '量', '都', '两', '体', '制', '机', '当', '使', '点', '从', '业', '本',
    '去', '把', '性', '好', '应', '开', '它', '合', '还', '因', '由', '其', '些', '然', '前', '外', '天', '政', '四',  '日',
    '那', '社', '义', '事', '平', '形', '相', '全', '表', '间', '样', '与', '关', '各', '重', '新', '线', '内', '数', '正',
    '心', '反', '你', '明', '看', '原', '又', '么', '利', '比', '或', '但', '质', '气', '第', '向', '道', '命', '此', '变',
    '条', '只', '没', '结', '解', '问', '意', '建', '月', '公', '无', '系', '军', '很', '情', '者', '最', '立', '代', '想',
    '已', '通', '并', '提', '直', '题', '党', '程', '展', '五', '果', '料', '象', '员', '革', '位', '入', '常', '文', '总',
    '次', '品', '式', '活', '设', '及', '管', '特', '件', '长', '求', '老', '头', '基', '资', '边', '流', '路', '级', '少',
    '图', '山', '统', '接', '知', '较', '将', '组', '见', '计', '别', '她', '手', '角', '期', '根', '论', '运', '农', '指',
    '几', '九', '区', '强', '放', '决', '西', '被', '干', '做', '必', '战', '先', '回', '则', '任', '取', '据', '处', '队',
    '南', '给', '色', '光', '门', '即', '保', '治', '北', '造', '百', '规', '热', '领', '七', '海', '口', '东', '导', '器',
    '压', '志', '世', '金', '增', '争', '济', '阶', '油', '思', '术', '极', '交', '受', '联', '什', '认', '六', '共', '权',
    '收', '证', '改', '清', '己', '美', '再', '采', '转', '更', '单', '风', '切', '打','白', '教', '速', '花', '带', '安',
    '场', '身', '车', '例', '真', '务', '具', '万', '每', '目', '至', '达', '走', '积', '示', '议', '声', '报', '斗', '完',
    '类', '八', '离', '华', '名', '确', '才', '科', '张', '信', '马', '节', '话', '米', '整', '空', '元', '况', '今', '集',
    '温', '传', '土', '许', '步', '群', '广', '石', '记', '需', '段', '研', '界', '拉', '林', '律', '叫', '且', '究', '观',
    '越', '织', '装', '影', '算', '低', '持', '音', '众', '书', '布', '复', '容', '儿', '须', '际', '商', '非', '验', '连',
    '断', '深', '难', '近', '矿', '千', '周', '委', '素', '技', '备', '半', '办', '青', '省', '列', '习', '响', '约', '支',
    '般', '史', '感', '劳', '便', '团', '往', '酸', '历', '市', '克', '何', '除', '消', '构', '府', '称', '太', '准', '精',
    '值', '号', '率', '族', '维', '划', '选', '标', '写', '存', '候', '毛', '亲', '快', '效', '斯', '院', '查', '江', '型',
    '眼', '王', '按', '格', '养', '易', '置', '派', '层', '片', '始', '却', '专', '状', '育', '厂', '京', '识', '适', '属',
    '圆', '包', '火', '住', '调', '满', '县', '局', '照', '参', '红', '细', '引', '听', '该', '铁', '价', '严', '龙', '飞',
'''


name_list = [ '目', '至', '达', '走', '积', '示', '议', '声', '报', '斗', '完',
    '类', '八', '离', '华', '名', '确', '才', '科', '张', '信',  '节', '话', '米', '整', '空', '元', '况', '今', '集',
    '温', '传', '土', '许', '步', '群', '广', '石', '记', '需', '段', '研', '界', '拉', '林', '律', '叫', '且', '究', '观',
    '越', '织', '装', '影', '算', '低', '持', '音', '众', '书', '布', '复', '容', '儿', '须', '际', '商', '非', '验', '连',
    '断', '深', '难', '近', '矿', '千', '周', '委', '素', '技', '备', '半', '办', '青', '省', '列', '习', '响', '约', '支',
    '般', '史', '感', '劳', '便', '团', '往', '酸', '历', '市', '克', '何', '除', '消', '构', '府', '称', '太', '准', '精',
    '值', '号', '率', '族', '维', '划', '选', '标', '写', '存', '候', '毛', '亲', '快', '效', '斯', '院', '查', '江', '型',
    '眼', '王', '按', '格', '养', '易', '置', '派', '层', '片', '始', '却', '专', '状', '育', '厂', '京', '识', '适', '属',
    '圆', '包', '火', '住', '调', '满', '县', '局', '照', '参', '红', '细', '引', '听', '该', '铁', '价', '严', '龙', '飞',

]
num = 1
for key in name_list:
    url = "https://www.biaoju01.com/statusquery/index/" \
          "?keyword={}&classId=&statusId=&agentName=&startNumber=&endNumber=" \
          "&timeType=&startTime=&endTime=&showType=img&searchType=state&page=1".format(key)
    headers = {
        # "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0",
        "User-Agent": "Mozilla/5.0(Windows;U;WindowsNT6.1;en-us)AppleWebKit/534.50(KHTML,likeGecko)Version/5.1Safari/534.50",
        "referer":"https://www.biaoju01.com/proposer/index/?keyword=%E6%9D%8E&timeType=&startTime=&endTime=&startNumber=&endNumber=&showType=list&searchType=state",
        # 伪IP，完美解决本网站的反爬
        "X-Forwarded-For": str(randint(0, 255)) + "." + str(randint(0, 255)) + "." + str(randint(0, 255)) + "." + str(
            randint(0, 255))
    }
    res = requests.post(url, headers=headers).text
    try:
        response = etree.HTML(res)
        scripts = response.xpath('//body/script[3]/text()')[0]
        scr_str = str(scripts)
        # print(scr_str)
        # 利用正则匹配到需要的json字符串
        results = re.findall(re.compile(r''',"rows":(.*?)}'.*?'secondStatusColor''', re.S), scr_str)[0]
        json_str = json.loads(results)
        # print(json_str)
        # 总页数
        results1 = ''.join(scr_str).split('span')[1]
        total_page = re.findall(re.compile(r'共(.*?)页', re.S), results1)[0]
        total_num = re.findall(re.compile(r'"total":(.*?),"rows', re.S), scr_str)[0]
        print(f'该分类下有{total_page}页，共{total_num}条数据！！')
        if int(total_page) > 1:
            for x in range(1, int(total_page) + 1):
                # 拼接下一页链接
                next_page_href = url.replace('&page=1', f'&page={x}')
                print(f'正在爬取第{x}页数据，网址为：{next_page_href}')
                # 如果存在下一页,翻页查询
                if next_page_href:
                    res = requests.post(next_page_href, headers=headers).text
                    response = etree.HTML(res)
                    scripts = response.xpath('//body/script[3]/text()')[0]
                    scr_str = str(scripts)
                    results = re.findall(re.compile(r''',"rows":(.*?)}'.*?'secondStatusColor''', re.S), scr_str)[0]
                    json_str = json.loads(results)

                for json_ in json_str:
                    # 商标状态
                    status = json_['status']
                    # 商标名称
                    brandName = urllib.parse.unquote(json_['name'])
                    # 详情页的参数token
                    token = json_['token']
                    # 商标号
                    no = json_['code']
                    # 申请人，json数据中是加密之后的数据，需要对其进行解密
                    useName = urllib.parse.unquote(json_['proposerName'])
                    # print(status,brandName,no,useName)
                    # 1.连接数据库
                    conn = MySQLdb.connect(
                        host='localhost',
                        port=3306,
                        user='root',
                        password='123456',
                        db='spider',
                        charset='utf8'
                    )
                    cursor = conn.cursor()
                    # 商标的注册号是唯一的，所以根据这个字段进行去重
                    # 先查询数据库中是否存在这个数据，如果存在就不存，如果不存在就更新数据库，
                    sql = 'select count(*) from brand where no=%s'
                    cursor.execute(sql, [no])
                    # rows:查询到的符合条件的个数，如果为0，说明数据库里不存在，则进行存数据库操作；否则不存数据库
                    rows = cursor.fetchone()
                    if rows[0] == 0:
                        # 不存在，开始进行存入数据库操作
                        try:
                            # print("正在存入注册号为{}数据，请稍等...".format(no))
                            # 2.准备sql语句
                            sql = 'INSERT IGNORE INTO brand VALUES(%s,%s,%s,%s)'
                            # 3.执行sql
                            cursor.execute(sql, [brandName, status, no, useName])
                            conn.commit()
                            # print('*' * 80)
                            num += 1
                            print(num)
                            name_list.append(num)
                        except Exception as e:
                            print(f'存入数据失败，原因：{e}')
                        finally:
                            # 最好执行一次数据库操作，关闭一次，否则的话sql语句过多会导致数据库异常报错
                            conn.close()
                    else:
                        # 数据已存在，无需进行存数据库操作
                        # conn.close()
                        print('数据已存在！')

                        # print('*' * 80)
        # time.sleep(0.5)
        # name_list.append(str(num+randint(0, 255)))
        # name_list.pop(0)
    except Exception as e:
        print(f'出错了，{e}')
    if num >= 10000000:
        print("数据收集完毕~~~")
        break
